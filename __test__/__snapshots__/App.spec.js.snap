// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Application test should not crash app 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <App>
    <BrowserRouter>
      <Router
        history={
          Object {
            "action": "POP",
            "block": [Function],
            "createHref": [Function],
            "go": [Function],
            "goBack": [Function],
            "goForward": [Function],
            "length": 1,
            "listen": [Function],
            "location": Object {
              "hash": "",
              "pathname": "/",
              "search": "",
              "state": undefined,
            },
            "push": [Function],
            "replace": [Function],
          }
        }
      >
        <Switch>
          <Route
            component={[Function]}
            computedMatch={
              Object {
                "isExact": true,
                "params": Object {},
                "path": "/",
                "url": "/",
              }
            }
            exact={true}
            location={
              Object {
                "hash": "",
                "pathname": "/",
                "search": "",
                "state": undefined,
              }
            }
            path="/"
          >
            <HomePage
              history={
                Object {
                  "action": "POP",
                  "block": [Function],
                  "createHref": [Function],
                  "go": [Function],
                  "goBack": [Function],
                  "goForward": [Function],
                  "length": 1,
                  "listen": [Function],
                  "location": Object {
                    "hash": "",
                    "pathname": "/",
                    "search": "",
                    "state": undefined,
                  },
                  "push": [Function],
                  "replace": [Function],
                }
              }
              location={
                Object {
                  "hash": "",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                }
              }
              match={
                Object {
                  "isExact": true,
                  "params": Object {},
                  "path": "/",
                  "url": "/",
                }
              }
            >
              <div
                className="wrapper"
              >
                <div
                  className="top-banner"
                >
                  <header>
                    <Link
                      to="/"
                    >
                      <a
                        href="/"
                        onClick={[Function]}
                      >
                        <img
                          alt="logo"
                          className="logo"
                          src="../../public/assets/images/banka-light-logo.svg"
                        />
                      </a>
                    </Link>
                    <nav>
                      <Link
                        alt="signup button"
                        className="signup-button"
                        to="/signup"
                      >
                        <a
                          alt="signup button"
                          className="signup-button"
                          href="/signup"
                          onClick={[Function]}
                        >
                          Signup
                        </a>
                      </Link>
                      <Link
                        alt="login button"
                        className="login-button"
                        to="/login"
                      >
                        <a
                          alt="login button"
                          className="login-button"
                          href="/login"
                          onClick={[Function]}
                        >
                          Login
                        </a>
                      </Link>
                    </nav>
                  </header>
                  <h1>
                    Creating
                    <br />
                    Financial Happiness for all.
                  </h1>
                </div>
                <div
                  className="easy-banking-section"
                >
                  <AchievementSection>
                    <div
                      className="achievement-section"
                      id="test"
                    >
                      <div
                        className="achievement"
                      >
                        <img
                          alt="200 Branches"
                          src="../../../public/assets/images/branch_img.svg"
                        />
                        <div>
                          <h4>
                            200
                          </h4>
                          <p>
                            Branches
                          </p>
                        </div>
                      </div>
                      <div
                        className="achievement"
                      >
                        <img
                          alt="100K Transactions"
                          src="../../../public/assets/images/transactions-img.svg"
                        />
                        <div>
                          <h4>
                            100K
                          </h4>
                          <p>
                            Transactions
                          </p>
                        </div>
                      </div>
                      <div
                        className="achievement"
                      >
                        <img
                          alt="3M Happy Customers"
                          src="../../../public/assets/images/happy-customer-img.svg"
                        />
                        <div>
                          <h4>
                            3M
                          </h4>
                          <p>
                            Happy Customers
                          </p>
                        </div>
                      </div>
                    </div>
                  </AchievementSection>
                  <h2>
                    Banking Made Easy
                  </h2>
                  <p>
                    Banka is a light-weight core banking application that powers banking operations like account creation, customer deposit and withdrawals. This app is meant to support a single bank, where users can signup and create bank accounts online, but must visit the branch to withdraw or deposit money.
                  </p>
                </div>
                <div
                  className="create-account-section"
                >
                  <h5>
                    Want to create an account?
                  </h5>
                  <Link
                    className="create-account-button"
                    to="/signup"
                  >
                    <a
                      className="create-account-button"
                      href="/signup"
                      onClick={[Function]}
                    >
                      Click here
                    </a>
                  </Link>
                </div>
                <ServiceSection>
                  <div
                    className="actions-section"
                  >
                    <div
                      className="action"
                    >
                      <img
                        alt="Open an account"
                        src="../../../public/assets/images/open-account-img.svg"
                      />
                      <div>
                        <h4>
                          Open an account
                        </h4>
                      </div>
                    </div>
                    <div
                      className="action"
                    >
                      <img
                        alt="100K Transactions"
                        src="../../../public/assets/images/transaction-history-img.svg"
                      />
                      <div>
                        <h4>
                          View transaction history
                        </h4>
                      </div>
                    </div>
                    <div
                      className="action"
                    >
                      <img
                        alt="3M Happy Customers"
                        src="../../../public/assets/images/internet-support-img.svg"
                      />
                      <div>
                        <h4>
                          Internet support
                        </h4>
                      </div>
                    </div>
                  </div>
                </ServiceSection>
              </div>
            </HomePage>
          </Route>
        </Switch>
      </Router>
    </BrowserRouter>
  </App>
</Provider>
`;

exports[`Application test should work fine on AccountModal Page 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <BrowserRouter>
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "createHref": [Function],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <Connect(AccountModal)
        createNewAccount={[Function]}
        error="error"
      >
        <AccountModal
          createNewAccount={[Function]}
          error={null}
          user={
            Object {
              "data": Object {
                "email": "sholaadeola@gmail.com",
                "id": 4,
                "isAdmin": false,
                "token": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InNob2xhYWRlb2xhQGdtYWlsLmNvbSIsImlkIjo0LCJpc0FkbWluIjpmYWxzZSwidHlwZSI6ImNsaWVudCIsImlhdCI6MTU2Njk1Mjg2MiwiZXhwIjoxNTY2OTU2NDYyfQ.57WF3BkCJWBIKVyJaYEts-iIIz4eQxunjYC8wYGdBz4",
                "type": "client",
              },
            }
          }
        >
          <div
            className="modal"
            id="accountModal"
          >
            <div
              className="onboarding-modal"
            >
              <h3>
                Create a bank account
              </h3>
              <label
                htmlFor="fname"
              >
                Name
                <input
                  disabled={true}
                  id="name"
                  name="name"
                  placeholder="Name"
                  type="text"
                />
              </label>
              <label
                htmlFor="email"
              >
                Email Address
                <input
                  disabled={true}
                  id="email"
                  name="email"
                  placeholder="Email Address"
                  type="text"
                />
              </label>
              <label
                htmlFor="balance"
              >
                Opening Balance
                <input
                  className="opbalance"
                  id="balance"
                  name="balance"
                  placeholder="Opening Balance"
                  type="text"
                  value="0.00"
                />
              </label>
              <div
                className="ct-select-group ct-js-select-group"
              >
                <select
                  className="ct-select ct-js-select"
                  onChange={[Function]}
                  value="default"
                >
                  <option
                    disabled={true}
                    value="default"
                  >
                    Select account type
                  </option>
                  <option
                    value="current"
                  >
                    Current
                  </option>
                  <option
                    value="savings"
                  >
                    Savings
                  </option>
                </select>
              </div>
              <button
                className="signup"
                onClick={[Function]}
                type="button"
              >
                <i
                  className="fa fa-circle-o-notch fa-spin"
                />
                Create
              </button>
            </div>
          </div>
        </AccountModal>
      </Connect(AccountModal)>
    </Router>
  </BrowserRouter>
</Provider>
`;

exports[`Application test should work fine on AccountModal Page 2`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <BrowserRouter>
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "createHref": [Function],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <NavBar
        user={
          Object {
            "email": "timileyin@gmail.com",
          }
        }
      >
        <header>
          <div
            className="top"
          >
            <img
              alt="logo"
              id="logo"
              src="../../public/assets/images/banka-blue-logo.svg"
            />
            <div
              className="current-user web-user dropdown"
            >
              <img
                alt="Avatar"
                className="avatar"
                src="../../public/assets/images/emeka copy@3x.png"
              />
              <h4
                id="current-user"
              >
                timileyin@gmail.com
              </h4>
              <img
                alt="Arrow Down"
                className="arrow-down"
                src="../../public/assets/images/arrow-drop-down.svg"
              />
              <div
                className="dropdown-content"
              >
                <Link
                  onClick={[Function]}
                  to="/"
                >
                  <a
                    href="/"
                    onClick={[Function]}
                  >
                    Logout
                  </a>
                </Link>
              </div>
            </div>
          </div>
        </header>
      </NavBar>
    </Router>
  </BrowserRouter>
</Provider>
`;

exports[`Application test should work fine on CustomerDashboard Page 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <BrowserRouter>
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "createHref": [Function],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <Connect(CustomerDashboard)
        error={null}
        history={
          Object {
            "push": [MockFunction] {
              "calls": Array [
                Array [
                  "/",
                ],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": undefined,
                },
              ],
            },
          }
        }
        isAuthenticated={false}
        onSubmit={[MockFunction]}
        user={
          Object {
            "email": "sholaadeola@gmail.com",
            "id": 4,
            "isAdmin": false,
            "type": "client",
          }
        }
      >
        <CustomerDashboard
          accounts={Array []}
          error={null}
          getAccounts={[Function]}
          getCurrentUser={[Function]}
          history={
            Object {
              "push": [MockFunction] {
                "calls": Array [
                  Array [
                    "/",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": undefined,
                  },
                ],
              },
            }
          }
          isAuthenticated={false}
          isPending={false}
          onSubmit={[MockFunction]}
          transactions={Array []}
          user={
            Object {
              "data": Object {
                "email": "sholaadeola@gmail.com",
                "id": 4,
                "isAdmin": false,
                "token": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InNob2xhYWRlb2xhQGdtYWlsLmNvbSIsImlkIjo0LCJpc0FkbWluIjpmYWxzZSwidHlwZSI6ImNsaWVudCIsImlhdCI6MTU2Njk1Mjg2MiwiZXhwIjoxNTY2OTU2NDYyfQ.57WF3BkCJWBIKVyJaYEts-iIIz4eQxunjYC8wYGdBz4",
                "type": "client",
              },
            }
          }
        >
          <div
            className="dash-wrapper"
          >
            <NavBar
              className="header"
              user={
                Object {
                  "data": Object {
                    "email": "sholaadeola@gmail.com",
                    "id": 4,
                    "isAdmin": false,
                    "token": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InNob2xhYWRlb2xhQGdtYWlsLmNvbSIsImlkIjo0LCJpc0FkbWluIjpmYWxzZSwidHlwZSI6ImNsaWVudCIsImlhdCI6MTU2Njk1Mjg2MiwiZXhwIjoxNTY2OTU2NDYyfQ.57WF3BkCJWBIKVyJaYEts-iIIz4eQxunjYC8wYGdBz4",
                    "type": "client",
                  },
                }
              }
            >
              <header>
                <div
                  className="top"
                >
                  <img
                    alt="logo"
                    id="logo"
                    src="../../public/assets/images/banka-blue-logo.svg"
                  />
                  <div
                    className="current-user web-user dropdown"
                  >
                    <img
                      alt="Avatar"
                      className="avatar"
                      src="../../public/assets/images/emeka copy@3x.png"
                    />
                    <h4
                      id="current-user"
                    />
                    <img
                      alt="Arrow Down"
                      className="arrow-down"
                      src="../../public/assets/images/arrow-drop-down.svg"
                    />
                    <div
                      className="dropdown-content"
                    >
                      <Link
                        onClick={[Function]}
                        to="/"
                      >
                        <a
                          href="/"
                          onClick={[Function]}
                        >
                          Logout
                        </a>
                      </Link>
                    </div>
                  </div>
                </div>
              </header>
            </NavBar>
            <div
              className="banner"
            >
              <div
                className="balance"
              >
                <p>
                  Account Balance
                </p>
                <h3
                  id="current-balance"
                >
                  0.00
                </h3>
              </div>
              <button
                id="account-button"
                onClick={[Function]}
                type="button"
              >
                Create an account
              </button>
            </div>
            <div
              className="content"
            >
              <Loader
                color="blue"
                css={Object {}}
                loading={false}
                margin="2px"
                size={0.6}
                sizeUnit="em"
              />
              <div
                id="accountText"
              >
                No account has been created
              </div>
            </div>
            <Modal
              ariaHideApp={true}
              bodyOpenClassName="ReactModal__Body--open"
              closeTimeoutMS={0}
              contentLabel="Create Account Modal"
              isOpen={false}
              onRequestClose={[Function]}
              parentSelector={[Function]}
              portalClassName="ReactModalPortal"
              role="dialog"
              shouldCloseOnEsc={true}
              shouldCloseOnOverlayClick={true}
              shouldFocusAfterRender={true}
              shouldReturnFocusAfterClose={true}
              style={
                Object {
                  "content": Object {
                    "border": "none",
                    "bottom": "auto",
                    "left": "50%",
                    "marginRight": "-50%",
                    "padding": "0",
                    "right": "auto",
                    "top": "50%",
                    "transform": "translate(-50%, -50%)",
                  },
                  "overlay": Object {
                    "backgroundColor": "rgba(0, 0, 0, 0.6)",
                    "overflow": "hidden",
                    "position": "fixed",
                  },
                }
              }
            >
              <Portal
                containerInfo={
                  <div
                    class="ReactModalPortal"
                  />
                }
              >
                <ModalPortal
                  ariaHideApp={true}
                  bodyOpenClassName="ReactModal__Body--open"
                  closeTimeoutMS={0}
                  contentLabel="Create Account Modal"
                  defaultStyles={
                    Object {
                      "content": Object {
                        "WebkitOverflowScrolling": "touch",
                        "background": "#fff",
                        "border": "1px solid #ccc",
                        "borderRadius": "4px",
                        "bottom": "40px",
                        "left": "40px",
                        "outline": "none",
                        "overflow": "auto",
                        "padding": "20px",
                        "position": "absolute",
                        "right": "40px",
                        "top": "40px",
                      },
                      "overlay": Object {
                        "backgroundColor": "rgba(255, 255, 255, 0.75)",
                        "bottom": 0,
                        "left": 0,
                        "position": "fixed",
                        "right": 0,
                        "top": 0,
                      },
                    }
                  }
                  isOpen={false}
                  onRequestClose={[Function]}
                  parentSelector={[Function]}
                  portalClassName="ReactModalPortal"
                  role="dialog"
                  shouldCloseOnEsc={true}
                  shouldCloseOnOverlayClick={true}
                  shouldFocusAfterRender={true}
                  shouldReturnFocusAfterClose={true}
                  style={
                    Object {
                      "content": Object {
                        "border": "none",
                        "bottom": "auto",
                        "left": "50%",
                        "marginRight": "-50%",
                        "padding": "0",
                        "right": "auto",
                        "top": "50%",
                        "transform": "translate(-50%, -50%)",
                      },
                      "overlay": Object {
                        "backgroundColor": "rgba(0, 0, 0, 0.6)",
                        "overflow": "hidden",
                        "position": "fixed",
                      },
                    }
                  }
                />
              </Portal>
            </Modal>
          </div>
        </CustomerDashboard>
      </Connect(CustomerDashboard)>
    </Router>
  </BrowserRouter>
</Provider>
`;

exports[`Application test should work fine on Login Page 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <BrowserRouter>
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "createHref": [Function],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <Connect(LoginForm)
        error={null}
        history={
          Object {
            "push": [MockFunction],
          }
        }
        isAuthenticated={false}
        onSubmit={[MockFunction]}
        user={
          Object {
            "data": Object {
              "email": "sholaadeola@gmail.com",
              "id": 4,
              "isAdmin": false,
              "token": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InNob2xhYWRlb2xhQGdtYWlsLmNvbSIsImlkIjo0LCJpc0FkbWluIjpmYWxzZSwidHlwZSI6ImNsaWVudCIsImlhdCI6MTU2Njk1Mjg2MiwiZXhwIjoxNTY2OTU2NDYyfQ.57WF3BkCJWBIKVyJaYEts-iIIz4eQxunjYC8wYGdBz4",
              "type": "client",
            },
          }
        }
      >
        <LoginForm
          error={null}
          history={
            Object {
              "push": [MockFunction],
            }
          }
          isAuthenticated={false}
          isPending={false}
          onSubmit={[Function]}
          user={
            Object {
              "data": Object {
                "email": "sholaadeola@gmail.com",
                "id": 4,
                "isAdmin": false,
                "token": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InNob2xhYWRlb2xhQGdtYWlsLmNvbSIsImlkIjo0LCJpc0FkbWluIjpmYWxzZSwidHlwZSI6ImNsaWVudCIsImlhdCI6MTU2Njk1Mjg2MiwiZXhwIjoxNTY2OTU2NDYyfQ.57WF3BkCJWBIKVyJaYEts-iIIz4eQxunjYC8wYGdBz4",
                "type": "client",
              },
            }
          }
        >
          <div
            className="container"
          >
            <div
              className="blue_section"
            >
              <h1>
                We are creating Financial Happiness for all.
              </h1>
            </div>
            <div
              className="form-container"
            >
              <img
                alt="logo"
                src="../../../public/assets/images/banka-blue-logo.svg"
              />
              <h3>
                Welcome back, login to continue
              </h3>
              <Formik
                enableReinitialize={false}
                initialValues={
                  Object {
                    "email": "",
                    "password": "",
                  }
                }
                isInitialValid={false}
                onSubmit={[Function]}
                validateOnBlur={true}
                validateOnChange={true}
                validationSchema={
                  ObjectSchema {
                    "_blacklist": RefSet {
                      "list": Set {},
                      "refs": Map {},
                    },
                    "_conditions": Array [],
                    "_defaultDefault": [Function],
                    "_deps": Array [],
                    "_excludedEdges": Array [],
                    "_exclusive": Object {},
                    "_mutate": undefined,
                    "_nodes": Array [
                      "password",
                      "email",
                    ],
                    "_options": Object {
                      "abortEarly": true,
                      "recursive": true,
                    },
                    "_type": "object",
                    "_typeError": [Function],
                    "_whitelist": RefSet {
                      "list": Set {},
                      "refs": Map {},
                    },
                    "fields": Object {
                      "email": StringSchema {
                        "_blacklist": RefSet {
                          "list": Set {},
                          "refs": Map {},
                        },
                        "_conditions": Array [],
                        "_deps": Array [],
                        "_exclusive": Object {
                          "required": true,
                          "trim": false,
                          "undefined": false,
                        },
                        "_mutate": undefined,
                        "_options": Object {
                          "abortEarly": true,
                          "recursive": true,
                        },
                        "_type": "string",
                        "_typeError": [Function],
                        "_whitelist": RefSet {
                          "list": Set {},
                          "refs": Map {},
                        },
                        "tests": Array [
                          [Function],
                          [Function],
                          [Function],
                        ],
                        "transforms": Array [
                          [Function],
                          [Function],
                        ],
                      },
                      "password": StringSchema {
                        "_blacklist": RefSet {
                          "list": Set {},
                          "refs": Map {},
                        },
                        "_conditions": Array [],
                        "_deps": Array [],
                        "_exclusive": Object {
                          "min": true,
                          "required": true,
                        },
                        "_mutate": undefined,
                        "_options": Object {
                          "abortEarly": true,
                          "recursive": true,
                        },
                        "_type": "string",
                        "_typeError": [Function],
                        "_whitelist": RefSet {
                          "list": Set {},
                          "refs": Map {},
                        },
                        "tests": Array [
                          [Function],
                          [Function],
                        ],
                        "transforms": Array [
                          [Function],
                        ],
                      },
                    },
                    "tests": Array [],
                    "transforms": Array [
                      [Function],
                    ],
                  }
                }
              >
                <Form
                  id="form"
                >
                  <Component
                    formik={
                      Object {
                        "dirty": false,
                        "errors": Object {},
                        "handleBlur": [Function],
                        "handleChange": [Function],
                        "handleReset": [Function],
                        "handleSubmit": [Function],
                        "initialValues": Object {
                          "email": "",
                          "password": "",
                        },
                        "isSubmitting": false,
                        "isValid": false,
                        "isValidating": false,
                        "registerField": [Function],
                        "resetForm": [Function],
                        "setError": [Function],
                        "setErrors": [Function],
                        "setFieldError": [Function],
                        "setFieldTouched": [Function],
                        "setFieldValue": [Function],
                        "setFormikState": [Function],
                        "setStatus": [Function],
                        "setSubmitting": [Function],
                        "setTouched": [Function],
                        "setValues": [Function],
                        "status": undefined,
                        "submitCount": 0,
                        "submitForm": [Function],
                        "touched": Object {},
                        "unregisterField": [Function],
                        "validate": undefined,
                        "validateField": [Function],
                        "validateForm": [Function],
                        "validateOnBlur": true,
                        "validateOnChange": true,
                        "validationSchema": ObjectSchema {
                          "_blacklist": RefSet {
                            "list": Set {},
                            "refs": Map {},
                          },
                          "_conditions": Array [],
                          "_defaultDefault": [Function],
                          "_deps": Array [],
                          "_excludedEdges": Array [],
                          "_exclusive": Object {},
                          "_mutate": undefined,
                          "_nodes": Array [
                            "password",
                            "email",
                          ],
                          "_options": Object {
                            "abortEarly": true,
                            "recursive": true,
                          },
                          "_type": "object",
                          "_typeError": [Function],
                          "_whitelist": RefSet {
                            "list": Set {},
                            "refs": Map {},
                          },
                          "fields": Object {
                            "email": StringSchema {
                              "_blacklist": RefSet {
                                "list": Set {},
                                "refs": Map {},
                              },
                              "_conditions": Array [],
                              "_deps": Array [],
                              "_exclusive": Object {
                                "required": true,
                                "trim": false,
                                "undefined": false,
                              },
                              "_mutate": undefined,
                              "_options": Object {
                                "abortEarly": true,
                                "recursive": true,
                              },
                              "_type": "string",
                              "_typeError": [Function],
                              "_whitelist": RefSet {
                                "list": Set {},
                                "refs": Map {},
                              },
                              "tests": Array [
                                [Function],
                                [Function],
                                [Function],
                              ],
                              "transforms": Array [
                                [Function],
                                [Function],
                              ],
                            },
                            "password": StringSchema {
                              "_blacklist": RefSet {
                                "list": Set {},
                                "refs": Map {},
                              },
                              "_conditions": Array [],
                              "_deps": Array [],
                              "_exclusive": Object {
                                "min": true,
                                "required": true,
                              },
                              "_mutate": undefined,
                              "_options": Object {
                                "abortEarly": true,
                                "recursive": true,
                              },
                              "_type": "string",
                              "_typeError": [Function],
                              "_whitelist": RefSet {
                                "list": Set {},
                                "refs": Map {},
                              },
                              "tests": Array [
                                [Function],
                                [Function],
                              ],
                              "transforms": Array [
                                [Function],
                              ],
                            },
                          },
                          "tests": Array [],
                          "transforms": Array [
                            [Function],
                          ],
                        },
                        "values": Object {
                          "email": "",
                          "password": "",
                        },
                      }
                    }
                    id="form"
                  >
                    <form
                      id="form"
                      onReset={[Function]}
                      onSubmit={[Function]}
                    >
                      <FormikConnect(FieldInner)
                        id="email"
                        name="email"
                        placeholder="Email Address"
                        type="text"
                      >
                        <FieldInner
                          formik={
                            Object {
                              "dirty": false,
                              "errors": Object {},
                              "handleBlur": [Function],
                              "handleChange": [Function],
                              "handleReset": [Function],
                              "handleSubmit": [Function],
                              "initialValues": Object {
                                "email": "",
                                "password": "",
                              },
                              "isSubmitting": false,
                              "isValid": false,
                              "isValidating": false,
                              "registerField": [Function],
                              "resetForm": [Function],
                              "setError": [Function],
                              "setErrors": [Function],
                              "setFieldError": [Function],
                              "setFieldTouched": [Function],
                              "setFieldValue": [Function],
                              "setFormikState": [Function],
                              "setStatus": [Function],
                              "setSubmitting": [Function],
                              "setTouched": [Function],
                              "setValues": [Function],
                              "status": undefined,
                              "submitCount": 0,
                              "submitForm": [Function],
                              "touched": Object {},
                              "unregisterField": [Function],
                              "validate": undefined,
                              "validateField": [Function],
                              "validateForm": [Function],
                              "validateOnBlur": true,
                              "validateOnChange": true,
                              "validationSchema": ObjectSchema {
                                "_blacklist": RefSet {
                                  "list": Set {},
                                  "refs": Map {},
                                },
                                "_conditions": Array [],
                                "_defaultDefault": [Function],
                                "_deps": Array [],
                                "_excludedEdges": Array [],
                                "_exclusive": Object {},
                                "_mutate": undefined,
                                "_nodes": Array [
                                  "password",
                                  "email",
                                ],
                                "_options": Object {
                                  "abortEarly": true,
                                  "recursive": true,
                                },
                                "_type": "object",
                                "_typeError": [Function],
                                "_whitelist": RefSet {
                                  "list": Set {},
                                  "refs": Map {},
                                },
                                "fields": Object {
                                  "email": StringSchema {
                                    "_blacklist": RefSet {
                                      "list": Set {},
                                      "refs": Map {},
                                    },
                                    "_conditions": Array [],
                                    "_deps": Array [],
                                    "_exclusive": Object {
                                      "required": true,
                                      "trim": false,
                                      "undefined": false,
                                    },
                                    "_mutate": undefined,
                                    "_options": Object {
                                      "abortEarly": true,
                                      "recursive": true,
                                    },
                                    "_type": "string",
                                    "_typeError": [Function],
                                    "_whitelist": RefSet {
                                      "list": Set {},
                                      "refs": Map {},
                                    },
                                    "tests": Array [
                                      [Function],
                                      [Function],
                                      [Function],
                                    ],
                                    "transforms": Array [
                                      [Function],
                                      [Function],
                                    ],
                                  },
                                  "password": StringSchema {
                                    "_blacklist": RefSet {
                                      "list": Set {},
                                      "refs": Map {},
                                    },
                                    "_conditions": Array [],
                                    "_deps": Array [],
                                    "_exclusive": Object {
                                      "min": true,
                                      "required": true,
                                    },
                                    "_mutate": undefined,
                                    "_options": Object {
                                      "abortEarly": true,
                                      "recursive": true,
                                    },
                                    "_type": "string",
                                    "_typeError": [Function],
                                    "_whitelist": RefSet {
                                      "list": Set {},
                                      "refs": Map {},
                                    },
                                    "tests": Array [
                                      [Function],
                                      [Function],
                                    ],
                                    "transforms": Array [
                                      [Function],
                                    ],
                                  },
                                },
                                "tests": Array [],
                                "transforms": Array [
                                  [Function],
                                ],
                              },
                              "values": Object {
                                "email": "",
                                "password": "",
                              },
                            }
                          }
                          id="email"
                          name="email"
                          placeholder="Email Address"
                          type="text"
                        >
                          <input
                            id="email"
                            name="email"
                            onBlur={[Function]}
                            onChange={[Function]}
                            placeholder="Email Address"
                            type="text"
                            value=""
                          />
                        </FieldInner>
                      </FormikConnect(FieldInner)>
                      <FormikConnect(FieldInner)
                        id="password"
                        name="password"
                        placeholder="Password"
                        type="password"
                      >
                        <FieldInner
                          formik={
                            Object {
                              "dirty": false,
                              "errors": Object {},
                              "handleBlur": [Function],
                              "handleChange": [Function],
                              "handleReset": [Function],
                              "handleSubmit": [Function],
                              "initialValues": Object {
                                "email": "",
                                "password": "",
                              },
                              "isSubmitting": false,
                              "isValid": false,
                              "isValidating": false,
                              "registerField": [Function],
                              "resetForm": [Function],
                              "setError": [Function],
                              "setErrors": [Function],
                              "setFieldError": [Function],
                              "setFieldTouched": [Function],
                              "setFieldValue": [Function],
                              "setFormikState": [Function],
                              "setStatus": [Function],
                              "setSubmitting": [Function],
                              "setTouched": [Function],
                              "setValues": [Function],
                              "status": undefined,
                              "submitCount": 0,
                              "submitForm": [Function],
                              "touched": Object {},
                              "unregisterField": [Function],
                              "validate": undefined,
                              "validateField": [Function],
                              "validateForm": [Function],
                              "validateOnBlur": true,
                              "validateOnChange": true,
                              "validationSchema": ObjectSchema {
                                "_blacklist": RefSet {
                                  "list": Set {},
                                  "refs": Map {},
                                },
                                "_conditions": Array [],
                                "_defaultDefault": [Function],
                                "_deps": Array [],
                                "_excludedEdges": Array [],
                                "_exclusive": Object {},
                                "_mutate": undefined,
                                "_nodes": Array [
                                  "password",
                                  "email",
                                ],
                                "_options": Object {
                                  "abortEarly": true,
                                  "recursive": true,
                                },
                                "_type": "object",
                                "_typeError": [Function],
                                "_whitelist": RefSet {
                                  "list": Set {},
                                  "refs": Map {},
                                },
                                "fields": Object {
                                  "email": StringSchema {
                                    "_blacklist": RefSet {
                                      "list": Set {},
                                      "refs": Map {},
                                    },
                                    "_conditions": Array [],
                                    "_deps": Array [],
                                    "_exclusive": Object {
                                      "required": true,
                                      "trim": false,
                                      "undefined": false,
                                    },
                                    "_mutate": undefined,
                                    "_options": Object {
                                      "abortEarly": true,
                                      "recursive": true,
                                    },
                                    "_type": "string",
                                    "_typeError": [Function],
                                    "_whitelist": RefSet {
                                      "list": Set {},
                                      "refs": Map {},
                                    },
                                    "tests": Array [
                                      [Function],
                                      [Function],
                                      [Function],
                                    ],
                                    "transforms": Array [
                                      [Function],
                                      [Function],
                                    ],
                                  },
                                  "password": StringSchema {
                                    "_blacklist": RefSet {
                                      "list": Set {},
                                      "refs": Map {},
                                    },
                                    "_conditions": Array [],
                                    "_deps": Array [],
                                    "_exclusive": Object {
                                      "min": true,
                                      "required": true,
                                    },
                                    "_mutate": undefined,
                                    "_options": Object {
                                      "abortEarly": true,
                                      "recursive": true,
                                    },
                                    "_type": "string",
                                    "_typeError": [Function],
                                    "_whitelist": RefSet {
                                      "list": Set {},
                                      "refs": Map {},
                                    },
                                    "tests": Array [
                                      [Function],
                                      [Function],
                                    ],
                                    "transforms": Array [
                                      [Function],
                                    ],
                                  },
                                },
                                "tests": Array [],
                                "transforms": Array [
                                  [Function],
                                ],
                              },
                              "values": Object {
                                "email": "",
                                "password": "",
                              },
                            }
                          }
                          id="password"
                          name="password"
                          placeholder="Password"
                          type="password"
                        >
                          <input
                            id="password"
                            name="password"
                            onBlur={[Function]}
                            onChange={[Function]}
                            placeholder="Password"
                            type="password"
                            value=""
                          />
                        </FieldInner>
                      </FormikConnect(FieldInner)>
                      <button
                        disabled={false}
                        type="submit"
                      >
                        Login
                      </button>
                      <div
                        className="loader"
                      >
                        <Loader
                          color="red"
                          css={Object {}}
                          loading={false}
                          margin="2px"
                          size={0.6}
                          sizeUnit="em"
                        />
                        <h4>
                          You don't have an account?
                          <span>
                            <Link
                              to="/signup"
                            >
                              <a
                                href="/signup"
                                onClick={[Function]}
                              >
                                Register
                              </a>
                            </Link>
                          </span>
                        </h4>
                      </div>
                    </form>
                  </Component>
                </Form>
              </Formik>
            </div>
          </div>
        </LoginForm>
      </Connect(LoginForm)>
    </Router>
  </BrowserRouter>
</Provider>
`;

exports[`Application test should work fine on SignUp Page 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <BrowserRouter>
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "createHref": [Function],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <Connect(SignUpForm)
        error={null}
        history={
          Object {
            "push": [MockFunction],
          }
        }
        isAuthenticated={false}
        onSubmit={[MockFunction]}
        user={
          Object {
            "data": Object {
              "email": "sholaadeola@gmail.com",
              "id": 4,
              "isAdmin": false,
              "token": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InNob2xhYWRlb2xhQGdtYWlsLmNvbSIsImlkIjo0LCJpc0FkbWluIjpmYWxzZSwidHlwZSI6ImNsaWVudCIsImlhdCI6MTU2Njk1Mjg2MiwiZXhwIjoxNTY2OTU2NDYyfQ.57WF3BkCJWBIKVyJaYEts-iIIz4eQxunjYC8wYGdBz4",
              "type": "client",
            },
          }
        }
      >
        <SignUpForm
          error={null}
          history={
            Object {
              "push": [MockFunction],
            }
          }
          isAuthenticated={false}
          isPending={false}
          onSubmit={[Function]}
          user={
            Object {
              "data": Object {
                "email": "sholaadeola@gmail.com",
                "id": 4,
                "isAdmin": false,
                "token": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InNob2xhYWRlb2xhQGdtYWlsLmNvbSIsImlkIjo0LCJpc0FkbWluIjpmYWxzZSwidHlwZSI6ImNsaWVudCIsImlhdCI6MTU2Njk1Mjg2MiwiZXhwIjoxNTY2OTU2NDYyfQ.57WF3BkCJWBIKVyJaYEts-iIIz4eQxunjYC8wYGdBz4",
                "type": "client",
              },
            }
          }
        >
          <div
            className="container"
          >
            <div
              className="blue_section"
            >
              <h1>
                We are creating Financial Happiness for all.
              </h1>
            </div>
            <div
              className="form-container"
            >
              <img
                alt="logo"
                src="../../../public/assets/images/banka-blue-logo.svg"
              />
              <h3>
                Welcome back to banka, signup to get started
              </h3>
              <Formik
                enableReinitialize={false}
                initialValues={
                  Object {
                    "email": "",
                    "firstname": "",
                    "lastname": "",
                    "password": "",
                  }
                }
                isInitialValid={false}
                onSubmit={[Function]}
                validateOnBlur={true}
                validateOnChange={true}
                validationSchema={
                  ObjectSchema {
                    "_blacklist": RefSet {
                      "list": Set {},
                      "refs": Map {},
                    },
                    "_conditions": Array [],
                    "_defaultDefault": [Function],
                    "_deps": Array [],
                    "_excludedEdges": Array [],
                    "_exclusive": Object {},
                    "_mutate": undefined,
                    "_nodes": Array [
                      "password",
                      "email",
                      "lastname",
                      "firstname",
                    ],
                    "_options": Object {
                      "abortEarly": true,
                      "recursive": true,
                    },
                    "_type": "object",
                    "_typeError": [Function],
                    "_whitelist": RefSet {
                      "list": Set {},
                      "refs": Map {},
                    },
                    "fields": Object {
                      "email": StringSchema {
                        "_blacklist": RefSet {
                          "list": Set {},
                          "refs": Map {},
                        },
                        "_conditions": Array [],
                        "_deps": Array [],
                        "_exclusive": Object {
                          "required": true,
                          "trim": false,
                          "undefined": false,
                        },
                        "_mutate": undefined,
                        "_options": Object {
                          "abortEarly": true,
                          "recursive": true,
                        },
                        "_type": "string",
                        "_typeError": [Function],
                        "_whitelist": RefSet {
                          "list": Set {},
                          "refs": Map {},
                        },
                        "tests": Array [
                          [Function],
                          [Function],
                          [Function],
                        ],
                        "transforms": Array [
                          [Function],
                          [Function],
                        ],
                      },
                      "firstname": StringSchema {
                        "_blacklist": RefSet {
                          "list": Set {},
                          "refs": Map {},
                        },
                        "_conditions": Array [],
                        "_deps": Array [],
                        "_exclusive": Object {
                          "required": true,
                        },
                        "_mutate": undefined,
                        "_options": Object {
                          "abortEarly": true,
                          "recursive": true,
                        },
                        "_type": "string",
                        "_typeError": [Function],
                        "_whitelist": RefSet {
                          "list": Set {},
                          "refs": Map {},
                        },
                        "tests": Array [
                          [Function],
                        ],
                        "transforms": Array [
                          [Function],
                        ],
                      },
                      "lastname": StringSchema {
                        "_blacklist": RefSet {
                          "list": Set {},
                          "refs": Map {},
                        },
                        "_conditions": Array [],
                        "_deps": Array [],
                        "_exclusive": Object {
                          "required": true,
                        },
                        "_mutate": undefined,
                        "_options": Object {
                          "abortEarly": true,
                          "recursive": true,
                        },
                        "_type": "string",
                        "_typeError": [Function],
                        "_whitelist": RefSet {
                          "list": Set {},
                          "refs": Map {},
                        },
                        "tests": Array [
                          [Function],
                        ],
                        "transforms": Array [
                          [Function],
                        ],
                      },
                      "password": StringSchema {
                        "_blacklist": RefSet {
                          "list": Set {},
                          "refs": Map {},
                        },
                        "_conditions": Array [],
                        "_deps": Array [],
                        "_exclusive": Object {
                          "min": true,
                          "required": true,
                          "trim": false,
                        },
                        "_mutate": undefined,
                        "_options": Object {
                          "abortEarly": true,
                          "recursive": true,
                        },
                        "_type": "string",
                        "_typeError": [Function],
                        "_whitelist": RefSet {
                          "list": Set {},
                          "refs": Map {},
                        },
                        "tests": Array [
                          [Function],
                          [Function],
                          [Function],
                        ],
                        "transforms": Array [
                          [Function],
                          [Function],
                        ],
                      },
                    },
                    "tests": Array [],
                    "transforms": Array [
                      [Function],
                    ],
                  }
                }
              >
                <Form
                  id="form"
                >
                  <Component
                    formik={
                      Object {
                        "dirty": false,
                        "errors": Object {},
                        "handleBlur": [Function],
                        "handleChange": [Function],
                        "handleReset": [Function],
                        "handleSubmit": [Function],
                        "initialValues": Object {
                          "email": "",
                          "firstname": "",
                          "lastname": "",
                          "password": "",
                        },
                        "isSubmitting": false,
                        "isValid": false,
                        "isValidating": false,
                        "registerField": [Function],
                        "resetForm": [Function],
                        "setError": [Function],
                        "setErrors": [Function],
                        "setFieldError": [Function],
                        "setFieldTouched": [Function],
                        "setFieldValue": [Function],
                        "setFormikState": [Function],
                        "setStatus": [Function],
                        "setSubmitting": [Function],
                        "setTouched": [Function],
                        "setValues": [Function],
                        "status": undefined,
                        "submitCount": 0,
                        "submitForm": [Function],
                        "touched": Object {},
                        "unregisterField": [Function],
                        "validate": undefined,
                        "validateField": [Function],
                        "validateForm": [Function],
                        "validateOnBlur": true,
                        "validateOnChange": true,
                        "validationSchema": ObjectSchema {
                          "_blacklist": RefSet {
                            "list": Set {},
                            "refs": Map {},
                          },
                          "_conditions": Array [],
                          "_defaultDefault": [Function],
                          "_deps": Array [],
                          "_excludedEdges": Array [],
                          "_exclusive": Object {},
                          "_mutate": undefined,
                          "_nodes": Array [
                            "password",
                            "email",
                            "lastname",
                            "firstname",
                          ],
                          "_options": Object {
                            "abortEarly": true,
                            "recursive": true,
                          },
                          "_type": "object",
                          "_typeError": [Function],
                          "_whitelist": RefSet {
                            "list": Set {},
                            "refs": Map {},
                          },
                          "fields": Object {
                            "email": StringSchema {
                              "_blacklist": RefSet {
                                "list": Set {},
                                "refs": Map {},
                              },
                              "_conditions": Array [],
                              "_deps": Array [],
                              "_exclusive": Object {
                                "required": true,
                                "trim": false,
                                "undefined": false,
                              },
                              "_mutate": undefined,
                              "_options": Object {
                                "abortEarly": true,
                                "recursive": true,
                              },
                              "_type": "string",
                              "_typeError": [Function],
                              "_whitelist": RefSet {
                                "list": Set {},
                                "refs": Map {},
                              },
                              "tests": Array [
                                [Function],
                                [Function],
                                [Function],
                              ],
                              "transforms": Array [
                                [Function],
                                [Function],
                              ],
                            },
                            "firstname": StringSchema {
                              "_blacklist": RefSet {
                                "list": Set {},
                                "refs": Map {},
                              },
                              "_conditions": Array [],
                              "_deps": Array [],
                              "_exclusive": Object {
                                "required": true,
                              },
                              "_mutate": undefined,
                              "_options": Object {
                                "abortEarly": true,
                                "recursive": true,
                              },
                              "_type": "string",
                              "_typeError": [Function],
                              "_whitelist": RefSet {
                                "list": Set {},
                                "refs": Map {},
                              },
                              "tests": Array [
                                [Function],
                              ],
                              "transforms": Array [
                                [Function],
                              ],
                            },
                            "lastname": StringSchema {
                              "_blacklist": RefSet {
                                "list": Set {},
                                "refs": Map {},
                              },
                              "_conditions": Array [],
                              "_deps": Array [],
                              "_exclusive": Object {
                                "required": true,
                              },
                              "_mutate": undefined,
                              "_options": Object {
                                "abortEarly": true,
                                "recursive": true,
                              },
                              "_type": "string",
                              "_typeError": [Function],
                              "_whitelist": RefSet {
                                "list": Set {},
                                "refs": Map {},
                              },
                              "tests": Array [
                                [Function],
                              ],
                              "transforms": Array [
                                [Function],
                              ],
                            },
                            "password": StringSchema {
                              "_blacklist": RefSet {
                                "list": Set {},
                                "refs": Map {},
                              },
                              "_conditions": Array [],
                              "_deps": Array [],
                              "_exclusive": Object {
                                "min": true,
                                "required": true,
                                "trim": false,
                              },
                              "_mutate": undefined,
                              "_options": Object {
                                "abortEarly": true,
                                "recursive": true,
                              },
                              "_type": "string",
                              "_typeError": [Function],
                              "_whitelist": RefSet {
                                "list": Set {},
                                "refs": Map {},
                              },
                              "tests": Array [
                                [Function],
                                [Function],
                                [Function],
                              ],
                              "transforms": Array [
                                [Function],
                                [Function],
                              ],
                            },
                          },
                          "tests": Array [],
                          "transforms": Array [
                            [Function],
                          ],
                        },
                        "values": Object {
                          "email": "",
                          "firstname": "",
                          "lastname": "",
                          "password": "",
                        },
                      }
                    }
                    id="form"
                  >
                    <form
                      id="form"
                      onReset={[Function]}
                      onSubmit={[Function]}
                    >
                      <FormikConnect(FieldInner)
                        data-testid="firstname"
                        name="firstname"
                        placeholder="First Name"
                        type="text"
                      >
                        <FieldInner
                          data-testid="firstname"
                          formik={
                            Object {
                              "dirty": false,
                              "errors": Object {},
                              "handleBlur": [Function],
                              "handleChange": [Function],
                              "handleReset": [Function],
                              "handleSubmit": [Function],
                              "initialValues": Object {
                                "email": "",
                                "firstname": "",
                                "lastname": "",
                                "password": "",
                              },
                              "isSubmitting": false,
                              "isValid": false,
                              "isValidating": false,
                              "registerField": [Function],
                              "resetForm": [Function],
                              "setError": [Function],
                              "setErrors": [Function],
                              "setFieldError": [Function],
                              "setFieldTouched": [Function],
                              "setFieldValue": [Function],
                              "setFormikState": [Function],
                              "setStatus": [Function],
                              "setSubmitting": [Function],
                              "setTouched": [Function],
                              "setValues": [Function],
                              "status": undefined,
                              "submitCount": 0,
                              "submitForm": [Function],
                              "touched": Object {},
                              "unregisterField": [Function],
                              "validate": undefined,
                              "validateField": [Function],
                              "validateForm": [Function],
                              "validateOnBlur": true,
                              "validateOnChange": true,
                              "validationSchema": ObjectSchema {
                                "_blacklist": RefSet {
                                  "list": Set {},
                                  "refs": Map {},
                                },
                                "_conditions": Array [],
                                "_defaultDefault": [Function],
                                "_deps": Array [],
                                "_excludedEdges": Array [],
                                "_exclusive": Object {},
                                "_mutate": undefined,
                                "_nodes": Array [
                                  "password",
                                  "email",
                                  "lastname",
                                  "firstname",
                                ],
                                "_options": Object {
                                  "abortEarly": true,
                                  "recursive": true,
                                },
                                "_type": "object",
                                "_typeError": [Function],
                                "_whitelist": RefSet {
                                  "list": Set {},
                                  "refs": Map {},
                                },
                                "fields": Object {
                                  "email": StringSchema {
                                    "_blacklist": RefSet {
                                      "list": Set {},
                                      "refs": Map {},
                                    },
                                    "_conditions": Array [],
                                    "_deps": Array [],
                                    "_exclusive": Object {
                                      "required": true,
                                      "trim": false,
                                      "undefined": false,
                                    },
                                    "_mutate": undefined,
                                    "_options": Object {
                                      "abortEarly": true,
                                      "recursive": true,
                                    },
                                    "_type": "string",
                                    "_typeError": [Function],
                                    "_whitelist": RefSet {
                                      "list": Set {},
                                      "refs": Map {},
                                    },
                                    "tests": Array [
                                      [Function],
                                      [Function],
                                      [Function],
                                    ],
                                    "transforms": Array [
                                      [Function],
                                      [Function],
                                    ],
                                  },
                                  "firstname": StringSchema {
                                    "_blacklist": RefSet {
                                      "list": Set {},
                                      "refs": Map {},
                                    },
                                    "_conditions": Array [],
                                    "_deps": Array [],
                                    "_exclusive": Object {
                                      "required": true,
                                    },
                                    "_mutate": undefined,
                                    "_options": Object {
                                      "abortEarly": true,
                                      "recursive": true,
                                    },
                                    "_type": "string",
                                    "_typeError": [Function],
                                    "_whitelist": RefSet {
                                      "list": Set {},
                                      "refs": Map {},
                                    },
                                    "tests": Array [
                                      [Function],
                                    ],
                                    "transforms": Array [
                                      [Function],
                                    ],
                                  },
                                  "lastname": StringSchema {
                                    "_blacklist": RefSet {
                                      "list": Set {},
                                      "refs": Map {},
                                    },
                                    "_conditions": Array [],
                                    "_deps": Array [],
                                    "_exclusive": Object {
                                      "required": true,
                                    },
                                    "_mutate": undefined,
                                    "_options": Object {
                                      "abortEarly": true,
                                      "recursive": true,
                                    },
                                    "_type": "string",
                                    "_typeError": [Function],
                                    "_whitelist": RefSet {
                                      "list": Set {},
                                      "refs": Map {},
                                    },
                                    "tests": Array [
                                      [Function],
                                    ],
                                    "transforms": Array [
                                      [Function],
                                    ],
                                  },
                                  "password": StringSchema {
                                    "_blacklist": RefSet {
                                      "list": Set {},
                                      "refs": Map {},
                                    },
                                    "_conditions": Array [],
                                    "_deps": Array [],
                                    "_exclusive": Object {
                                      "min": true,
                                      "required": true,
                                      "trim": false,
                                    },
                                    "_mutate": undefined,
                                    "_options": Object {
                                      "abortEarly": true,
                                      "recursive": true,
                                    },
                                    "_type": "string",
                                    "_typeError": [Function],
                                    "_whitelist": RefSet {
                                      "list": Set {},
                                      "refs": Map {},
                                    },
                                    "tests": Array [
                                      [Function],
                                      [Function],
                                      [Function],
                                    ],
                                    "transforms": Array [
                                      [Function],
                                      [Function],
                                    ],
                                  },
                                },
                                "tests": Array [],
                                "transforms": Array [
                                  [Function],
                                ],
                              },
                              "values": Object {
                                "email": "",
                                "firstname": "",
                                "lastname": "",
                                "password": "",
                              },
                            }
                          }
                          name="firstname"
                          placeholder="First Name"
                          type="text"
                        >
                          <input
                            data-testid="firstname"
                            name="firstname"
                            onBlur={[Function]}
                            onChange={[Function]}
                            placeholder="First Name"
                            type="text"
                            value=""
                          />
                        </FieldInner>
                      </FormikConnect(FieldInner)>
                      <FormikConnect(FieldInner)
                        data-testid="lastname"
                        name="lastname"
                        placeholder="Last Name"
                        type="text"
                      >
                        <FieldInner
                          data-testid="lastname"
                          formik={
                            Object {
                              "dirty": false,
                              "errors": Object {},
                              "handleBlur": [Function],
                              "handleChange": [Function],
                              "handleReset": [Function],
                              "handleSubmit": [Function],
                              "initialValues": Object {
                                "email": "",
                                "firstname": "",
                                "lastname": "",
                                "password": "",
                              },
                              "isSubmitting": false,
                              "isValid": false,
                              "isValidating": false,
                              "registerField": [Function],
                              "resetForm": [Function],
                              "setError": [Function],
                              "setErrors": [Function],
                              "setFieldError": [Function],
                              "setFieldTouched": [Function],
                              "setFieldValue": [Function],
                              "setFormikState": [Function],
                              "setStatus": [Function],
                              "setSubmitting": [Function],
                              "setTouched": [Function],
                              "setValues": [Function],
                              "status": undefined,
                              "submitCount": 0,
                              "submitForm": [Function],
                              "touched": Object {},
                              "unregisterField": [Function],
                              "validate": undefined,
                              "validateField": [Function],
                              "validateForm": [Function],
                              "validateOnBlur": true,
                              "validateOnChange": true,
                              "validationSchema": ObjectSchema {
                                "_blacklist": RefSet {
                                  "list": Set {},
                                  "refs": Map {},
                                },
                                "_conditions": Array [],
                                "_defaultDefault": [Function],
                                "_deps": Array [],
                                "_excludedEdges": Array [],
                                "_exclusive": Object {},
                                "_mutate": undefined,
                                "_nodes": Array [
                                  "password",
                                  "email",
                                  "lastname",
                                  "firstname",
                                ],
                                "_options": Object {
                                  "abortEarly": true,
                                  "recursive": true,
                                },
                                "_type": "object",
                                "_typeError": [Function],
                                "_whitelist": RefSet {
                                  "list": Set {},
                                  "refs": Map {},
                                },
                                "fields": Object {
                                  "email": StringSchema {
                                    "_blacklist": RefSet {
                                      "list": Set {},
                                      "refs": Map {},
                                    },
                                    "_conditions": Array [],
                                    "_deps": Array [],
                                    "_exclusive": Object {
                                      "required": true,
                                      "trim": false,
                                      "undefined": false,
                                    },
                                    "_mutate": undefined,
                                    "_options": Object {
                                      "abortEarly": true,
                                      "recursive": true,
                                    },
                                    "_type": "string",
                                    "_typeError": [Function],
                                    "_whitelist": RefSet {
                                      "list": Set {},
                                      "refs": Map {},
                                    },
                                    "tests": Array [
                                      [Function],
                                      [Function],
                                      [Function],
                                    ],
                                    "transforms": Array [
                                      [Function],
                                      [Function],
                                    ],
                                  },
                                  "firstname": StringSchema {
                                    "_blacklist": RefSet {
                                      "list": Set {},
                                      "refs": Map {},
                                    },
                                    "_conditions": Array [],
                                    "_deps": Array [],
                                    "_exclusive": Object {
                                      "required": true,
                                    },
                                    "_mutate": undefined,
                                    "_options": Object {
                                      "abortEarly": true,
                                      "recursive": true,
                                    },
                                    "_type": "string",
                                    "_typeError": [Function],
                                    "_whitelist": RefSet {
                                      "list": Set {},
                                      "refs": Map {},
                                    },
                                    "tests": Array [
                                      [Function],
                                    ],
                                    "transforms": Array [
                                      [Function],
                                    ],
                                  },
                                  "lastname": StringSchema {
                                    "_blacklist": RefSet {
                                      "list": Set {},
                                      "refs": Map {},
                                    },
                                    "_conditions": Array [],
                                    "_deps": Array [],
                                    "_exclusive": Object {
                                      "required": true,
                                    },
                                    "_mutate": undefined,
                                    "_options": Object {
                                      "abortEarly": true,
                                      "recursive": true,
                                    },
                                    "_type": "string",
                                    "_typeError": [Function],
                                    "_whitelist": RefSet {
                                      "list": Set {},
                                      "refs": Map {},
                                    },
                                    "tests": Array [
                                      [Function],
                                    ],
                                    "transforms": Array [
                                      [Function],
                                    ],
                                  },
                                  "password": StringSchema {
                                    "_blacklist": RefSet {
                                      "list": Set {},
                                      "refs": Map {},
                                    },
                                    "_conditions": Array [],
                                    "_deps": Array [],
                                    "_exclusive": Object {
                                      "min": true,
                                      "required": true,
                                      "trim": false,
                                    },
                                    "_mutate": undefined,
                                    "_options": Object {
                                      "abortEarly": true,
                                      "recursive": true,
                                    },
                                    "_type": "string",
                                    "_typeError": [Function],
                                    "_whitelist": RefSet {
                                      "list": Set {},
                                      "refs": Map {},
                                    },
                                    "tests": Array [
                                      [Function],
                                      [Function],
                                      [Function],
                                    ],
                                    "transforms": Array [
                                      [Function],
                                      [Function],
                                    ],
                                  },
                                },
                                "tests": Array [],
                                "transforms": Array [
                                  [Function],
                                ],
                              },
                              "values": Object {
                                "email": "",
                                "firstname": "",
                                "lastname": "",
                                "password": "",
                              },
                            }
                          }
                          name="lastname"
                          placeholder="Last Name"
                          type="text"
                        >
                          <input
                            data-testid="lastname"
                            name="lastname"
                            onBlur={[Function]}
                            onChange={[Function]}
                            placeholder="Last Name"
                            type="text"
                            value=""
                          />
                        </FieldInner>
                      </FormikConnect(FieldInner)>
                      <FormikConnect(FieldInner)
                        data-testid="email"
                        id="email"
                        name="email"
                        placeholder="Email Address"
                        type="email"
                      >
                        <FieldInner
                          data-testid="email"
                          formik={
                            Object {
                              "dirty": false,
                              "errors": Object {},
                              "handleBlur": [Function],
                              "handleChange": [Function],
                              "handleReset": [Function],
                              "handleSubmit": [Function],
                              "initialValues": Object {
                                "email": "",
                                "firstname": "",
                                "lastname": "",
                                "password": "",
                              },
                              "isSubmitting": false,
                              "isValid": false,
                              "isValidating": false,
                              "registerField": [Function],
                              "resetForm": [Function],
                              "setError": [Function],
                              "setErrors": [Function],
                              "setFieldError": [Function],
                              "setFieldTouched": [Function],
                              "setFieldValue": [Function],
                              "setFormikState": [Function],
                              "setStatus": [Function],
                              "setSubmitting": [Function],
                              "setTouched": [Function],
                              "setValues": [Function],
                              "status": undefined,
                              "submitCount": 0,
                              "submitForm": [Function],
                              "touched": Object {},
                              "unregisterField": [Function],
                              "validate": undefined,
                              "validateField": [Function],
                              "validateForm": [Function],
                              "validateOnBlur": true,
                              "validateOnChange": true,
                              "validationSchema": ObjectSchema {
                                "_blacklist": RefSet {
                                  "list": Set {},
                                  "refs": Map {},
                                },
                                "_conditions": Array [],
                                "_defaultDefault": [Function],
                                "_deps": Array [],
                                "_excludedEdges": Array [],
                                "_exclusive": Object {},
                                "_mutate": undefined,
                                "_nodes": Array [
                                  "password",
                                  "email",
                                  "lastname",
                                  "firstname",
                                ],
                                "_options": Object {
                                  "abortEarly": true,
                                  "recursive": true,
                                },
                                "_type": "object",
                                "_typeError": [Function],
                                "_whitelist": RefSet {
                                  "list": Set {},
                                  "refs": Map {},
                                },
                                "fields": Object {
                                  "email": StringSchema {
                                    "_blacklist": RefSet {
                                      "list": Set {},
                                      "refs": Map {},
                                    },
                                    "_conditions": Array [],
                                    "_deps": Array [],
                                    "_exclusive": Object {
                                      "required": true,
                                      "trim": false,
                                      "undefined": false,
                                    },
                                    "_mutate": undefined,
                                    "_options": Object {
                                      "abortEarly": true,
                                      "recursive": true,
                                    },
                                    "_type": "string",
                                    "_typeError": [Function],
                                    "_whitelist": RefSet {
                                      "list": Set {},
                                      "refs": Map {},
                                    },
                                    "tests": Array [
                                      [Function],
                                      [Function],
                                      [Function],
                                    ],
                                    "transforms": Array [
                                      [Function],
                                      [Function],
                                    ],
                                  },
                                  "firstname": StringSchema {
                                    "_blacklist": RefSet {
                                      "list": Set {},
                                      "refs": Map {},
                                    },
                                    "_conditions": Array [],
                                    "_deps": Array [],
                                    "_exclusive": Object {
                                      "required": true,
                                    },
                                    "_mutate": undefined,
                                    "_options": Object {
                                      "abortEarly": true,
                                      "recursive": true,
                                    },
                                    "_type": "string",
                                    "_typeError": [Function],
                                    "_whitelist": RefSet {
                                      "list": Set {},
                                      "refs": Map {},
                                    },
                                    "tests": Array [
                                      [Function],
                                    ],
                                    "transforms": Array [
                                      [Function],
                                    ],
                                  },
                                  "lastname": StringSchema {
                                    "_blacklist": RefSet {
                                      "list": Set {},
                                      "refs": Map {},
                                    },
                                    "_conditions": Array [],
                                    "_deps": Array [],
                                    "_exclusive": Object {
                                      "required": true,
                                    },
                                    "_mutate": undefined,
                                    "_options": Object {
                                      "abortEarly": true,
                                      "recursive": true,
                                    },
                                    "_type": "string",
                                    "_typeError": [Function],
                                    "_whitelist": RefSet {
                                      "list": Set {},
                                      "refs": Map {},
                                    },
                                    "tests": Array [
                                      [Function],
                                    ],
                                    "transforms": Array [
                                      [Function],
                                    ],
                                  },
                                  "password": StringSchema {
                                    "_blacklist": RefSet {
                                      "list": Set {},
                                      "refs": Map {},
                                    },
                                    "_conditions": Array [],
                                    "_deps": Array [],
                                    "_exclusive": Object {
                                      "min": true,
                                      "required": true,
                                      "trim": false,
                                    },
                                    "_mutate": undefined,
                                    "_options": Object {
                                      "abortEarly": true,
                                      "recursive": true,
                                    },
                                    "_type": "string",
                                    "_typeError": [Function],
                                    "_whitelist": RefSet {
                                      "list": Set {},
                                      "refs": Map {},
                                    },
                                    "tests": Array [
                                      [Function],
                                      [Function],
                                      [Function],
                                    ],
                                    "transforms": Array [
                                      [Function],
                                      [Function],
                                    ],
                                  },
                                },
                                "tests": Array [],
                                "transforms": Array [
                                  [Function],
                                ],
                              },
                              "values": Object {
                                "email": "",
                                "firstname": "",
                                "lastname": "",
                                "password": "",
                              },
                            }
                          }
                          id="email"
                          name="email"
                          placeholder="Email Address"
                          type="email"
                        >
                          <input
                            data-testid="email"
                            id="email"
                            name="email"
                            onBlur={[Function]}
                            onChange={[Function]}
                            placeholder="Email Address"
                            type="email"
                            value=""
                          />
                        </FieldInner>
                      </FormikConnect(FieldInner)>
                      <FormikConnect(FieldInner)
                        data-testid="password"
                        name="password"
                        placeholder="Password"
                        type="password"
                      >
                        <FieldInner
                          data-testid="password"
                          formik={
                            Object {
                              "dirty": false,
                              "errors": Object {},
                              "handleBlur": [Function],
                              "handleChange": [Function],
                              "handleReset": [Function],
                              "handleSubmit": [Function],
                              "initialValues": Object {
                                "email": "",
                                "firstname": "",
                                "lastname": "",
                                "password": "",
                              },
                              "isSubmitting": false,
                              "isValid": false,
                              "isValidating": false,
                              "registerField": [Function],
                              "resetForm": [Function],
                              "setError": [Function],
                              "setErrors": [Function],
                              "setFieldError": [Function],
                              "setFieldTouched": [Function],
                              "setFieldValue": [Function],
                              "setFormikState": [Function],
                              "setStatus": [Function],
                              "setSubmitting": [Function],
                              "setTouched": [Function],
                              "setValues": [Function],
                              "status": undefined,
                              "submitCount": 0,
                              "submitForm": [Function],
                              "touched": Object {},
                              "unregisterField": [Function],
                              "validate": undefined,
                              "validateField": [Function],
                              "validateForm": [Function],
                              "validateOnBlur": true,
                              "validateOnChange": true,
                              "validationSchema": ObjectSchema {
                                "_blacklist": RefSet {
                                  "list": Set {},
                                  "refs": Map {},
                                },
                                "_conditions": Array [],
                                "_defaultDefault": [Function],
                                "_deps": Array [],
                                "_excludedEdges": Array [],
                                "_exclusive": Object {},
                                "_mutate": undefined,
                                "_nodes": Array [
                                  "password",
                                  "email",
                                  "lastname",
                                  "firstname",
                                ],
                                "_options": Object {
                                  "abortEarly": true,
                                  "recursive": true,
                                },
                                "_type": "object",
                                "_typeError": [Function],
                                "_whitelist": RefSet {
                                  "list": Set {},
                                  "refs": Map {},
                                },
                                "fields": Object {
                                  "email": StringSchema {
                                    "_blacklist": RefSet {
                                      "list": Set {},
                                      "refs": Map {},
                                    },
                                    "_conditions": Array [],
                                    "_deps": Array [],
                                    "_exclusive": Object {
                                      "required": true,
                                      "trim": false,
                                      "undefined": false,
                                    },
                                    "_mutate": undefined,
                                    "_options": Object {
                                      "abortEarly": true,
                                      "recursive": true,
                                    },
                                    "_type": "string",
                                    "_typeError": [Function],
                                    "_whitelist": RefSet {
                                      "list": Set {},
                                      "refs": Map {},
                                    },
                                    "tests": Array [
                                      [Function],
                                      [Function],
                                      [Function],
                                    ],
                                    "transforms": Array [
                                      [Function],
                                      [Function],
                                    ],
                                  },
                                  "firstname": StringSchema {
                                    "_blacklist": RefSet {
                                      "list": Set {},
                                      "refs": Map {},
                                    },
                                    "_conditions": Array [],
                                    "_deps": Array [],
                                    "_exclusive": Object {
                                      "required": true,
                                    },
                                    "_mutate": undefined,
                                    "_options": Object {
                                      "abortEarly": true,
                                      "recursive": true,
                                    },
                                    "_type": "string",
                                    "_typeError": [Function],
                                    "_whitelist": RefSet {
                                      "list": Set {},
                                      "refs": Map {},
                                    },
                                    "tests": Array [
                                      [Function],
                                    ],
                                    "transforms": Array [
                                      [Function],
                                    ],
                                  },
                                  "lastname": StringSchema {
                                    "_blacklist": RefSet {
                                      "list": Set {},
                                      "refs": Map {},
                                    },
                                    "_conditions": Array [],
                                    "_deps": Array [],
                                    "_exclusive": Object {
                                      "required": true,
                                    },
                                    "_mutate": undefined,
                                    "_options": Object {
                                      "abortEarly": true,
                                      "recursive": true,
                                    },
                                    "_type": "string",
                                    "_typeError": [Function],
                                    "_whitelist": RefSet {
                                      "list": Set {},
                                      "refs": Map {},
                                    },
                                    "tests": Array [
                                      [Function],
                                    ],
                                    "transforms": Array [
                                      [Function],
                                    ],
                                  },
                                  "password": StringSchema {
                                    "_blacklist": RefSet {
                                      "list": Set {},
                                      "refs": Map {},
                                    },
                                    "_conditions": Array [],
                                    "_deps": Array [],
                                    "_exclusive": Object {
                                      "min": true,
                                      "required": true,
                                      "trim": false,
                                    },
                                    "_mutate": undefined,
                                    "_options": Object {
                                      "abortEarly": true,
                                      "recursive": true,
                                    },
                                    "_type": "string",
                                    "_typeError": [Function],
                                    "_whitelist": RefSet {
                                      "list": Set {},
                                      "refs": Map {},
                                    },
                                    "tests": Array [
                                      [Function],
                                      [Function],
                                      [Function],
                                    ],
                                    "transforms": Array [
                                      [Function],
                                      [Function],
                                    ],
                                  },
                                },
                                "tests": Array [],
                                "transforms": Array [
                                  [Function],
                                ],
                              },
                              "values": Object {
                                "email": "",
                                "firstname": "",
                                "lastname": "",
                                "password": "",
                              },
                            }
                          }
                          name="password"
                          placeholder="Password"
                          type="password"
                        >
                          <input
                            data-testid="password"
                            name="password"
                            onBlur={[Function]}
                            onChange={[Function]}
                            placeholder="Password"
                            type="password"
                            value=""
                          />
                        </FieldInner>
                      </FormikConnect(FieldInner)>
                      <button
                        data-testid="submit-form"
                        disabled={false}
                        type="submit"
                      >
                        Signup
                      </button>
                      <div
                        className="loader"
                      >
                        <Loader
                          color="red"
                          css={Object {}}
                          loading={false}
                          margin="2px"
                          size={0.6}
                          sizeUnit="em"
                        />
                        <h4>
                          Already have an account?
                          <span>
                            <Link
                              to="/login"
                            >
                              <a
                                href="/login"
                                onClick={[Function]}
                              >
                                Login
                              </a>
                            </Link>
                          </span>
                        </h4>
                      </div>
                    </form>
                  </Component>
                </Form>
              </Formik>
            </div>
          </div>
        </SignUpForm>
      </Connect(SignUpForm)>
    </Router>
  </BrowserRouter>
</Provider>
`;
